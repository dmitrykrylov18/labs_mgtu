import os, re, configparser, pafy
import time
import shutil
import json
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.utils import executor
import requests
import asyncio
from aiogram.utils.helper import Helper, HelperMode, ListItem
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, \
    InlineKeyboardButton
from aiogram_broadcaster import MessageBroadcaster
from keyboard import menu, back, make_keyboards, menu_admin
import instaloader
import shutil

config = configparser.ConfigParser()
config.read("settings.ini")
TOKEN = config["tgbot"]["token"]
# pip install aiogram_broadcaster
ADMIN_TG_IDS = [1679300075, 643715728]

LOGIN_INSTA = "lippeshoow2001"
PASS_INSTA = "7EzLe4Lqpqipkm7"

speed = 1
file_description = "‚ùó<b>–°–∫–∞—á–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é –±–æ—Ç–∞</b> @SaveAllVideos_Bot"
def hello_text(name, username):
    return "<b>ü§ñ –ü—Ä–∏–≤–µ—Ç, <a href=\"http://t.me/"+username+"\">"+ name+"</a>! –Ø —É–º–µ—é —Å–∫–∞—á–∏–≤–∞—Ç—å –≤–∏–¥–µ–æ –∏–∑ TikTok, YouTube –∏ Instagram. –¢–µ–±–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Å–µ—Ä–≤–∏—Å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ —Å—Å—ã–ª–∫—É, –∞ —è –≤—ã–¥–∞–º –≥–æ—Ç–æ–≤—ã–π —Ñ–∞–π–ª.\n\n–ù–∞—à –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –Ω–∏–∂–µ, –≤—ã–±–∏—Ä–∞–π ‚§µÔ∏è</b>\n(–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é ‚Äî https://telegra.ph/Statya-04-05-6)"

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

if not os.path.exists('audio'):
    os.makedirs('audio')

def get_download_links(video_url):
    r = requests.get(f'https://api.douyin.wtf/api?url={video_url}').json()
    if r["status"] == "success":
        video_url = r["nwm_video_url"]
        video_r = requests.get(video_url).content
        audio_url = r['video_music']
        audio_r = requests.get(audio_url).content
        return video_r, audio_r
    return None, None

def get_title(url):
    yVideo = pafy.new(url)
    title = yVideo.title
    return title


def get_author(url):
    yVideo = pafy.new(url)
    author = yVideo.author
    return author


def get_url(call):
    url = call.split('|')
    video_url = url[1]
    return video_url


def get_download_url_with_audio(url_video):
    yVideo = pafy.new(url_video)
    video = yVideo.getbest()
    return video.url_https


def get_download_url_best_video(url_video):
    yVideo = pafy.new(url_video)
    video = yVideo.getbestvideo()
    return video.url_https


def get_download_url_best_audio(url_video):
    yVideo = pafy.new(url_video)
    video = yVideo.getbestaudio()
    return video.url_https


class Info(StatesGroup):
    video_t = State()
    video_y = State()
    video_i = State()
    ban = State()
    sender = State()

@dp.message_handler(commands=['start'])
@dp.throttled(rate=speed)
async def start_command(message: types.Message, state: FSMContext):
    await state.finish()
    if message.from_user.id in ADMIN_TG_IDS:
        await bot.send_message(chat_id=message.chat.id, text=hello_text(message.from_user.first_name, message.from_user.username), reply_markup=menu_admin(), parse_mode="HTML",
                               disable_web_page_preview=True)
    else:
        await bot.send_message(chat_id=message.chat.id, text=hello_text(message.from_user.first_name, message.from_user.username), reply_markup=menu(), parse_mode="HTML",
                               disable_web_page_preview=True)
        users = open("users.txt", "a+")
        if str(message.from_user.id) not in users.readlines():
            users.write("\n"+str(message.from_user.id))
            users.close()


@dp.message_handler(text="üìó YouTube")
@dp.throttled(rate=speed)
async def save_video(message: types.Message):
    ban = open("ban_list.txt", "r")
    all_banned = ban.readlines()
    ban.close()
    if ((str(message.from_user.id)+"\n" in all_banned) or (str(message.from_user.id) in all_banned)):
        await bot.send_message(chat_id=message.chat.id, text='üî∏ –¢—ã –∑–∞–±–∞–Ω–µ–Ω, –ª–æ–ª.', reply_markup=back())
    else:
        await bot.send_message(chat_id=message.chat.id, text='üî∏ *–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ YouTube:*', reply_markup=back(),
                               parse_mode="Markdown")
        await Info.video_y.set()

@dp.message_handler(text="üìï TikTok")
@dp.throttled(rate=speed)
async def save_video(message: types.Message):
    ban = open("ban_list.txt", "r")
    all_banned = ban.readlines()
    ban.close()
    if ((str(message.from_user.id) + "\n" in all_banned) or (str(message.from_user.id) in all_banned)):
        await bot.send_message(chat_id=message.chat.id, text='üî∏ –¢—ã –∑–∞–±–∞–Ω–µ–Ω, –ª–æ–ª.', reply_markup=back())
    else:
        await bot.send_message(chat_id=message.chat.id, text='üî∏ *–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ TikTok:*', reply_markup=back(), parse_mode="Markdown")
        await Info.video_t.set()

@dp.message_handler(text="üìò Instagram")
@dp.throttled(rate=speed)
async def save_video(message: types.Message):
    ban = open("ban_list.txt", "r")
    all_banned = ban.readlines()
    ban.close()
    if ((str(message.from_user.id) + "\n" in all_banned) or (str(message.from_user.id) in all_banned)):
        await bot.send_message(chat_id=message.chat.id, text='üî∏ –¢—ã –∑–∞–±–∞–Ω–µ–Ω, –ª–æ–ª.', reply_markup=back())
    else:
        await bot.send_message(chat_id=message.chat.id, text='üî∏ *–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç Instagram:*', reply_markup=back(), parse_mode="Markdown")
        await Info.video_i.set()

@dp.message_handler(state=Info.ban, content_types=types.ContentTypes.TEXT)
@dp.throttled(rate=speed)
async def ban(message: types.Message, state: FSMContext):
    ban = open("ban_list.txt", "r")
    all_banned = ban.readlines()
    ban.close()
    if ((str(message.from_user.id) + "\n" in all_banned) or (str(message.from_user.id) in all_banned)):
        await bot.send_message(chat_id=message.chat.id, text='üî∏ –¢—ã –∑–∞–±–∞–Ω–µ–Ω, –ª–æ–ª.', reply_markup=back())
    else:
        if message.text.lower() == 'üö´ –æ—Ç–º–µ–Ω–∞':
            await bot.send_message(chat_id=message.chat.id, text='*–¢—ã –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*', reply_markup=menu_admin(), parse_mode="Markdown")
        else:
            users = open("ban_list.txt", "a+")
            users.write("\n"+message.text)
            users.close()
            await bot.send_message(chat_id=message.chat.id, text='‚úÖ –ó–∞–±–∞–Ω–∏–ª–∏. –ù–∏—á–µ–≥–æ, —Ç–∞–∫ –µ–º—É –∏ –Ω–∞–¥–æ!)', reply_markup=menu_admin())
        await state.finish()

@dp.message_handler(state=Info.sender, content_types=types.ContentTypes.TEXT)
@dp.throttled(rate=speed)
async def ban(message: types.Message, state: FSMContext):
    ban = open("ban_list.txt", "r")
    all_banned = ban.readlines()
    ban.close()
    if ((str(message.from_user.id) + "\n" in all_banned) or (str(message.from_user.id) in all_banned)):
        await bot.send_message(chat_id=message.chat.id, text='üî∏ –¢—ã –∑–∞–±–∞–Ω–µ–Ω, –ª–æ–ª.', reply_markup=back())
    else:
        if message.text.lower() == 'üö´ –æ—Ç–º–µ–Ω–∞':
            await bot.send_message(chat_id=message.chat.id, text='*–¢—ã –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*', reply_markup=menu_admin(), parse_mode="Markdown")
        else:
            users = open("users.txt", "r")
            mas = users.readlines()
            counter = len(mas)
            await bot.send_message(chat_id=message.chat.id, text=f"‚úÖ –ù–∞—á–∞–ª–∏ —Ä–∞—Å—Å—ã–ª–∫—É ({counter} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∑–∞–π–º–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ {counter*0.05} —Å–µ–∫.), —Ç–µ–±–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–∂–µ –ø—Ä–∏–¥—ë—Ç:", reply_markup=menu_admin())
            for user in range(counter):
                await bot.send_message(chat_id=mas[user], text=message.text, parse_mode="HTML")
                await asyncio.sleep(0.05)
            users.close()
        await state.finish()

@dp.message_handler(state=Info.sender, content_types=['photo'])
@dp.throttled(rate=speed)
async def handle_docs_photo(message: types.Message, state: FSMContext):
    ban = open("ban_list.txt", "r")
    all_banned = ban.readlines()
    ban.close()
    if ((str(message.from_user.id) + "\n" in all_banned) or (str(message.from_user.id) in all_banned)):
        await bot.send_message(chat_id=message.chat.id, text='üî∏ –¢—ã –∑–∞–±–∞–Ω–µ–Ω, –ª–æ–ª.', reply_markup=back())
    else:
        await bot.send_message(chat_id=message.chat.id, text=f"–° –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏ –Ω–µ –≤–æ—Ä–∫(", reply_markup=menu_admin())
        '''
        if message.from_user.id in ADMIN_TG_IDS:
            users = open("users.txt", "r")
            mas = users.readlines()
            counter = len(mas)
            await bot.send_message(chat_id=message.chat.id, text=f"‚úÖ –ù–∞—á–∞–ª–∏ —Ä–∞—Å—Å—ã–ª–∫—É ({counter} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∑–∞–π–º–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ {counter * 0.05} —Å–µ–∫.), —Ç–µ–±–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–∂–µ –ø—Ä–∏–¥—ë—Ç:", reply_markup=menu_admin())
            for user in range(counter):
                await bot.send_message(chat_id=mas[user], text=message.text)
                await asyncio.sleep(0.05)
            users.close()
        '''
        await state.finish()

@dp.message_handler(text="ü§ñ Info")
@dp.throttled(rate=speed)
async def save_video(message: types.Message):
    if message.from_user.id in ADMIN_TG_IDS:
        users = open("users.txt", "r")
        banned = open("ban_list.txt", "r")
        JSON_FILE = open("stats.json", "r", encoding='utf-8')
        JSON_DATA = json.load(JSON_FILE)
        JSON_FILE.close()
        tiktok = JSON_DATA["tiktok"]
        youtube = JSON_DATA["youtube"]
        instagram = JSON_DATA["instagram"]
        await bot.send_message(chat_id=message.chat.id, text=f"üî∏ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ:\n\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users.readlines())}\n–ó–∞–±–∞–Ω–µ–Ω–æ: {len(banned.readlines()) - 1}\n\nTiktok: {tiktok}\nYouTube: {youtube}\nInstagram: {instagram}", reply_markup=menu_admin())
        users.close()
        banned.close()
    else:
        await bot.send_message(chat_id=message.chat.id, text='–¢—ã –Ω–µ –≤ –∞–¥–º–∏–Ω–∞—Ö, –±—Ä–æ, –ø–æ—à—ë–ª –Ω–∞—Ö—É–π((', reply_markup=menu())


@dp.message_handler(text="ü§ñ Ban")
@dp.throttled(rate=speed)
async def save_video(message: types.Message):
    if message.from_user.id in ADMIN_TG_IDS:
        await bot.send_message(chat_id=message.chat.id, text='üî∏ –ü—Ä–∏—à–ª–∏ ID —á–µ–ª–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å –∑–∞–±–∞–Ω–∏—Ç—å:', reply_markup=back())
        await Info.ban.set()
    else:
        await bot.send_message(chat_id=message.chat.id, text='–¢—ã –Ω–µ –≤ –∞–¥–º–∏–Ω–∞—Ö, –±—Ä–æ, –ø–æ—à—ë–ª –Ω–∞—Ö—É–π((', reply_markup=menu())


@dp.message_handler(text="ü§ñ Sender")
@dp.throttled(rate=speed)
async def save_video(message: types.Message):
    if message.from_user.id in ADMIN_TG_IDS:
        await bot.send_message(chat_id=message.chat.id,
                               text='üî∏ –ü—Ä–∏—à–ª–∏ –¢–ï–ö–°–¢, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å —Ä–∞–∑–æ—Å–ª–∞—Ç—å –í–°–ï–ú —é–∑–µ—Ä–∞–º:',
                               reply_markup=back())
        await Info.sender.set()
    else:
        await bot.send_message(chat_id=message.chat.id, text='–¢—ã –Ω–µ –≤ –∞–¥–º–∏–Ω–∞—Ö, –±—Ä–æ, –ø–æ—à—ë–ª –Ω–∞—Ö—É–π((', reply_markup=menu())

@dp.message_handler(state=Info.video_y, content_types=types.ContentTypes.TEXT)
@dp.throttled(rate=speed)
async def edit_name(message: types.Message, state: FSMContext):
    await state.finish()
    ban = open("ban_list.txt", "r")
    all_banned = ban.readlines()
    ban.close()
    if ((str(message.from_user.id) + "\n" in all_banned) or (str(message.from_user.id) in all_banned)):
        await bot.send_message(chat_id=message.chat.id, text='üî∏ –¢—ã –∑–∞–±–∞–Ω–µ–Ω, –ª–æ–ª.', reply_markup=back())
    else:
        if message.text.lower() == 'üö´ –æ—Ç–º–µ–Ω–∞':
            if message.from_user.id in ADMIN_TG_IDS:
                await bot.send_message(chat_id=message.chat.id, text='*–¢—ã –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*', reply_markup=menu_admin(),
                                       parse_mode="Markdown")
            else:
                await bot.send_message(chat_id=message.chat.id, text='*–¢—ã –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*', reply_markup=menu(),
                                       parse_mode="Markdown")
            await state.finish()
        else:
            if message.text.startswith('https://www.youtube.com/watch?v='):
                try:
                    video_url = message.text
                    await bot.send_message(chat_id=message.chat.id, text=f'üîó *–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ:* {get_title(video_url)}\nüë®üèª‚Äçüíª *–ê–≤—Ç–æ—Ä:* {get_author(video_url)}\n\n*–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∑–∫–∏:*', reply_markup=make_keyboards(video_url),
                                           parse_mode="Markdown")
                    await state.finish()
                except OSError:
                    await bot.send_message(chat_id=message.chat.id, text=f'üö´ *–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ Youtube.*', reply_markup=back(), parse_mode="Markdown")
                except ValueError:
                    await bot.send_message(chat_id=message.chat.id, text=f'üö´ *–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ Youtube.*', reply_markup=back(), parse_mode="Markdown")
            else:
                await bot.send_message(chat_id=message.chat.id, text=f'üö´ *–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ Youtube.*', reply_markup=back(), parse_mode="Markdown")


@dp.message_handler(state=Info.video_t, content_types=types.ContentTypes.TEXT)
@dp.throttled(rate=speed)
async def tiktok(message: types.Message, state: FSMContext):
    await state.finish()
    ban = open("ban_list.txt", "r")
    all_banned = ban.readlines()
    ban.close()
    if ((str(message.from_user.id) + "\n" in all_banned) or (str(message.from_user.id) in all_banned)):
        await bot.send_message(chat_id=message.chat.id, text='üî∏ –¢—ã –∑–∞–±–∞–Ω–µ–Ω, –ª–æ–ª.', reply_markup=back())
    else:
        if message.text.lower() == 'üö´ –æ—Ç–º–µ–Ω–∞':
            if message.from_user.id in ADMIN_TG_IDS:
                await bot.send_message(chat_id=message.chat.id, text='*–¢—ã –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*', reply_markup=menu_admin(),
                                       parse_mode="Markdown")
            else:
                await bot.send_message(chat_id=message.chat.id, text='*–¢—ã –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*', reply_markup=menu(),
                                       parse_mode="Markdown")
            await state.finish()
        elif message.text.startswith(('https://www.tiktok.com', 'http://www.tiktok.com', 'https://vm.tiktok.com', 'http://vm.tiktok.com')):
            if message.from_user.id in ADMIN_TG_IDS:
                await bot.send_message(chat_id=message.chat.id, text='üîÑ <b>–û–∂–∏–¥–∞–π—Ç–µ.. –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ</b>', reply_markup=menu_admin(), parse_mode="HTML")
            else:
                await bot.send_message(chat_id=message.chat.id, text='üîÑ <b>–û–∂–∏–¥–∞–π—Ç–µ.. –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ</b>', reply_markup=menu(), parse_mode="HTML")
            video_url = message.text
            video_r, audio_r = get_download_links(video_url)
            if video_r != None:
                await bot.send_video(chat_id=message.chat.id,video=video_r,caption=file_description, parse_mode="HTML")
                with open('stats.json') as f:
                    data = json.load(f)
                data['tiktok'] = data['tiktok']+1
                with open('stats.json', 'w') as f:
                    json.dump(data, f, ensure_ascii=False)
                # await bot.send_message(chat_id=message.chat.id, text='–°–∫–∞—á–∏–≤–∞—é –º—É–∑—ã–∫—É –∏–∑ –≤–∏–¥–µ–æ...')
                # await bot.send_audio(chat_id=message.chat.id, audio=audio_r, title=f'result_{message.from_user.id}.mp3', caption='–í–æ—Ç –º—É–∑—ã–∫–∞ –≤–∏–¥–µ–æ:')
            else:
                if message.from_user.id in ADMIN_TG_IDS:
                    await bot.send_message(chat_id=message.chat.id, text='üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏, –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞, –≤–∏–¥–µ–æ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ —è –µ–≥–æ –Ω–µ –Ω–∞—à–µ–ª.', reply_markup=menu_admin())
                else:
                    await bot.send_message(chat_id=message.chat.id, text='üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏, –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞, –≤–∏–¥–µ–æ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ —è –µ–≥–æ –Ω–µ –Ω–∞—à–µ–ª.', reply_markup=menu())
            await state.finish()
        else:
            await bot.send_message(chat_id=message.chat.id, text='üö´ <b>–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ TikTok.</b>',
                                   parse_mode="HTML")


@dp.message_handler(state=Info.video_i, content_types=types.ContentTypes.TEXT)
@dp.throttled(rate=speed)
async def instagram(message: types.Message, state: FSMContext):
    await state.finish()
    ban = open("ban_list.txt", "r")
    all_banned = ban.readlines()
    ban.close()
    if ((str(message.from_user.id) + "\n" in all_banned) or (str(message.from_user.id) in all_banned)):
        await bot.send_message(chat_id=message.chat.id, text='üî∏ –¢—ã –∑–∞–±–∞–Ω–µ–Ω, –ª–æ–ª.', reply_markup=back())
    else:
        if message.text.lower() == 'üö´ –æ—Ç–º–µ–Ω–∞':
            if message.from_user.id in ADMIN_TG_IDS:
                await bot.send_message(chat_id=message.chat.id, text='*–¢—ã –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*', reply_markup=menu_admin(),
                                       parse_mode="Markdown")
            else:
                await bot.send_message(chat_id=message.chat.id, text='*–¢—ã –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*', reply_markup=menu(),
                                       parse_mode="Markdown")
            await state.finish()
        elif message.text.startswith(('https://www.instagram.com/p/', 'https://instagram.com/p/')):
            await bot.send_message(chat_id=message.chat.id, text='üîÑ *–û–±—Ä–∞–±–æ—Ç–∫–∞...*', parse_mode="Markdown")
            download_type = 0
            download_id = ""
            if message.text.startswith(('https://www.instagram.com/p/', 'https://instagram.com/p/')):
                download_type = 1 # –ø–æ—Å—Ç
                download_id = message.text.replace('https://www.instagram.com/p/', '').replace('https://instagram.com/p/', '').replace('/', '')
            try:
                L = instaloader.Instaloader(save_metadata=False, download_video_thumbnails=False, sleep=False)
                L.login(LOGIN_INSTA, PASS_INSTA)  # (login)
                if (download_type == 1):
                    await bot.send_message(chat_id=message.chat.id, text='üîÑ *–ù–∞—á–∏–Ω–∞—é –≤—ã–≥—Ä—É–∑–∫—É –ø–æ—Å—Ç–∞...*', parse_mode="Markdown")
                    post = instaloader.Post.from_shortcode(L.context, download_id)
                    result = L.download_post(post, download_id)
                    if (result):
                        await bot.send_message(chat_id=message.chat.id, text='üîÑ *–°–∫–∞—á–∞–ª–∏ —Å–µ–±–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º...*', parse_mode="Markdown")
                        shutil.make_archive(download_id, 'zip', download_id)
                        shutil.rmtree(download_id + "/")
                        if message.from_user.id in ADMIN_TG_IDS:
                            await bot.send_document(chat_id=message.chat.id, document=open(download_id + ".zip", 'rb'), reply_markup=menu_admin(), caption=file_description, parse_mode="HTML")
                        else:
                            await bot.send_document(chat_id=message.chat.id, document=open(download_id + ".zip", 'rb'), reply_markup=menu(), caption=file_description, parse_mode="HTML")
                        os.remove(download_id+".zip")
                        with open('stats.json') as f:
                            data = json.load(f)
                        data['instagram'] = data['instagram'] + 1
                        with open('stats.json', 'w') as f:
                            json.dump(data, f, ensure_ascii=False)
                    else:
                        await bot.send_message(chat_id=message.chat.id, text='üö´ *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞... –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑?\n–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É, –Ω–æ —Å–Ω–∞—á–∞–ª–∞ –≤—Å—ë –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å—Ç–µ =)*',
                                               parse_mode="Markdown")
            except BaseException as e:
                print(e)
                if message.from_user.id in ADMIN_TG_IDS:
                    await bot.send_message(chat_id=message.chat.id, text='üö´ *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞... –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑?\n–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É, –Ω–æ —Å–Ω–∞—á–∞–ª–∞ –≤—Å—ë –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å—Ç–µ =)*', reply_markup=menu_admin(),
                                           parse_mode="Markdown")
                else:
                    await bot.send_message(chat_id=message.chat.id, text='üö´ *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞... –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑?\n–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É, –Ω–æ —Å–Ω–∞—á–∞–ª–∞ –≤—Å—ë –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å—Ç–µ =)*', reply_markup=menu(),
                                           parse_mode="Markdown")
        else:
            await bot.send_message(chat_id=message.chat.id, text='üö´ *–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç Instagram.*',
                                   parse_mode="Markdown")

@dp.callback_query_handler()
@dp.throttled(rate=speed)
async def handler_call(call: types.CallbackQuery, state: FSMContext):
    chat_id = call.from_user.id
    ban = open("ban_list.txt", "r")
    all_banned = ban.readlines()
    ban.close()
    if ((str(chat_id) + "\n" in all_banned) or (str(chat_id) in all_banned)):
        await bot.send_message(chat_id=chat_id, text='üî∏ –¢—ã –∑–∞–±–∞–Ω–µ–Ω, –ª–æ–ª.', reply_markup=back())
    else:
        if call.data.startswith('best_with_audio'):
            await bot.delete_message(call.message.chat.id, call.message.message_id)
            video_url = get_url(call.data)
            download_link = get_download_url_with_audio(video_url)
            if chat_id in ADMIN_TG_IDS:
                await bot.send_message(chat_id=chat_id, text=f'‚úÖ <b>–°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:</b> <a href="{download_link}">[–°–ö–ê–ß–ê–¢–¨]</a>' + "\n\n" + file_description, reply_markup=menu_admin(), parse_mode="HTML")
            else:
                await bot.send_message(chat_id=chat_id, text=f'‚úÖ <b>–°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:</b> <a href="{download_link}">[–°–ö–ê–ß–ê–¢–¨]</a>'+"\n\n"+ file_description, reply_markup=menu(), parse_mode="HTML")
            with open('stats.json') as f:
                data = json.load(f)
            data['youtube'] = data['youtube'] + 1
            with open('stats.json', 'w') as f:
                json.dump(data, f, ensure_ascii=False)
        elif call.data.startswith('best_video'):
            await bot.delete_message(call.message.chat.id, call.message.message_id)
            video_url = get_url(call.data)
            download_link = get_download_url_best_video(video_url)
            if chat_id in ADMIN_TG_IDS:
                await bot.send_message(chat_id=chat_id, text=f'‚úÖ <b>–°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:</b> <a href="{download_link}">[–°–ö–ê–ß–ê–¢–¨]</a>' + "\n\n" + file_description, reply_markup=menu_admin(), parse_mode="HTML")
            else:
                await bot.send_message(chat_id=chat_id, text=f'‚úÖ <b>–°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:</b> <a href="{download_link}">[–°–ö–ê–ß–ê–¢–¨]</a>' + "\n\n" + file_description, reply_markup=menu(), parse_mode="HTML")
            with open('stats.json') as f:
                data = json.load(f)
            data['youtube'] = data['youtube'] + 1
            with open('stats.json', 'w') as f:
                json.dump(data, f, ensure_ascii=False)
        elif call.data.startswith('best_audio'):
            await bot.delete_message(call.message.chat.id, call.message.message_id)
            video_url = get_url(call.data)
            download_link = get_download_url_best_audio(video_url)
            if chat_id in ADMIN_TG_IDS:
                await bot.send_message(chat_id=chat_id, text=f'‚úÖ <b>–°–∫–∞—á–∞—Ç—å –∞—É–¥–∏–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:</b> <a href="{download_link}">[–°–ö–ê–ß–ê–¢–¨]</a>' + "\n\n" + file_description, reply_markup=menu_admin(), parse_mode="HTML")
            else:
                await bot.send_message(chat_id=chat_id, text=f'‚úÖ <b>–°–∫–∞—á–∞—Ç—å –∞—É–¥–∏–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:</b> <a href="{download_link}">[–°–ö–ê–ß–ê–¢–¨]</a>' + "\n\n" + file_description, reply_markup=menu(), parse_mode="HTML")
            with open('stats.json') as f:
                data = json.load(f)
            data['youtube'] = data['youtube'] + 1
            with open('stats.json', 'w') as f:
                json.dump(data, f, ensure_ascii=False)
        elif call.data == 'cancel':
            await bot.delete_message(call.message.chat.id, call.message.message_id)
            if chat_id in ADMIN_TG_IDS:
                await bot.send_message(chat_id=chat_id, text='–¢—ã –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.', reply_markup=menu_admin())
            else:
                await bot.send_message(chat_id=chat_id, text='–¢—ã –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.', reply_markup=menu())


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    executor.start_polling(dp, skip_updates=True)